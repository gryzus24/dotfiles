#!/usr/bin/python3 -S
from __future__ import annotations

import os
import sys

def ANSI(s: str) -> str:
    return f'\033[{s}m'  #]

RST = ANSI('')
KESC = '\033[K'  #]

# Color of "matching non-empty text on a selected line".
DEFAULT_MS_ESC = f'{ANSI("01;31")}{KESC}'

# Color of "separators that are inserted between selected line fields".
DEFAULT_SE_ESC = f'{ANSI("36")}{KESC}:{RST}{KESC}'

F_AFTER_MATCH  = 0x01
F_MATCH        = 0x02
F_BEFORE_MATCH = 0x04


def main() -> int:
    colors = os.environ.get('GREP_COLORS')
    if colors is None:
        ms_esc = DEFAULT_MS_ESC
        se_esc = DEFAULT_SE_ESC
    else:
        c = colors.split(':')
        ms_escapes = [
            f'{ANSI(x.partition("=")[2])}{KESC}'
            for x in c if x.startswith(('mt=', 'ms='))
        ]
        se_escapes = [
            f'{ANSI(x.partition("=")[2])}{KESC}:{RST}{KESC}'
            for x in c if x.startswith('se=')
        ]
        ms_esc = ms_escapes.pop() if ms_escapes else DEFAULT_MS_ESC
        se_esc = se_escapes.pop() if se_escapes else DEFAULT_SE_ESC

    if len(sys.argv) > 1:
        for i, c in enumerate(sys.argv[1]):
            if (c != '0' and c != '1') or i > 2:
                sys.stderr.write('bad mask (specify XXX where X is either 0 or 1)\n')
                return 1

        flags = 0
        for i, c in enumerate(sys.argv[1]):
            flags |= (ord(c) & 0x0f) << (2 - i)
    else:
        flags = F_BEFORE_MATCH | F_MATCH | F_AFTER_MATCH

    parts = []
    fileinfo_align_max = text_align_max = 0
    for line in sys.stdin:
        before,   ms_sep,  match_and_after   = line.partition(ms_esc)
        fileinfo, se_sep,  text_before_match = before.rpartition(se_esc)
        match,    rst_sep, after_match       = match_and_after.partition(RST)

        match = ms_sep + match + rst_sep

        if not flags & F_BEFORE_MATCH:
            text_before_match = ''
        if not flags & F_MATCH:
            match = ''
        if not flags & F_AFTER_MATCH:
            after_match = '\n'

        if se_sep:
            fileinfo += se_sep
            if len(fileinfo) > fileinfo_align_max:
                fileinfo_align_max = len(fileinfo)

        text_before_match = text_before_match.lstrip()
        if '\t' in text_before_match:
            text_before_match = text_before_match.replace('\t', '    ')

        if len(text_before_match) > text_align_max:
            text_align_max = len(text_before_match)

        parts.append((fileinfo, text_before_match, match, after_match))

    if not parts:
        return 1

    can_squeeze = True
    squeeze_max = 1 << 31  # some big number
    for fileinfo, text_before_match, _, _ in parts:
        fileinfo_gap = fileinfo_align_max - len(fileinfo)
        text_gap = text_align_max - len(text_before_match)

        line_squeeze_max = fileinfo_gap + text_gap
        if not line_squeeze_max:
            can_squeeze = False
            break

        if line_squeeze_max < squeeze_max:
            squeeze_max = line_squeeze_max

    o = sys.stdout
    if can_squeeze:
        for fileinfo, text_before_match, match, after_match in parts:
            fileinfo_gap = fileinfo_align_max - len(fileinfo)
            if squeeze_max > fileinfo_gap:
                fileinfo_squeeze = fileinfo_gap
                text_squeeze = squeeze_max - fileinfo_gap
            else:
                fileinfo_squeeze = squeeze_max
                text_squeeze = 0

            o.write(
                f'{fileinfo:{fileinfo_align_max - fileinfo_squeeze}}'
                f'{text_before_match:>{text_align_max - text_squeeze}}'
                f'{match}'
                f'{after_match}'
            )
    else:
        for fileinfo, text_before_match, match, after_match in parts:
            o.write(
                f'{fileinfo:{fileinfo_align_max}}'
                f'{text_before_match:>{text_align_max}}'
                f'{match}'
                f'{after_match}'
            )

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
