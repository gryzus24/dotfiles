#!/usr/bin/python3 -S
from __future__ import annotations

import shutil
import subprocess
import sys


def main() -> int:
    pactl = shutil.which('pactl')
    if pactl is None:
        sys.stderr.write('error: no pactl in $PATH\n')
        return 1

    with subprocess.Popen(
        (pactl, 'list', 'short', 'sinks'),
        stdout=subprocess.PIPE,
        encoding='UTF-8'
    ) as p:
        outs, _ = p.communicate()
    sinks = [x.split('\t')[1] for x in outs.splitlines()]

    if not sinks:
        sys.stderr.write('error: no sinks\n')
        return 1
    elif len(sinks) == 1:
        return 0

    with subprocess.Popen(
        (pactl, 'get-default-sink'),
        stdout=subprocess.PIPE,
        encoding='UTF-8'
    ) as p:
        outs, _ = p.communicate()
    default_sink = outs.strip()

    try:
        next_indx = (sinks.index(default_sink) + 1) % len(sinks)
    except ValueError:
        sys.stderr.write(f'error: @DEFAULT_SINK@ ({default_sink!r}) not in sinks\n')
        return 1

    cmd = (pactl, 'set-default-sink', sinks[next_indx])
    with subprocess.Popen(cmd) as p:
        rc = p.wait()

    if rc:
        sys.stderr.write(f'error: {" ".join(cmd)} failed with exit code {rc}\n')
        return rc

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
